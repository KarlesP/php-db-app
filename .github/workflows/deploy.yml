name: Deploy to AWS

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS
        env:
          CLUSTER_NAME: php-ecs-cluster
          SERVICE_NAME: php-ecs-service
          TASK_DEFINITION_FAMILY: php-app-task
          CONTAINER_NAME: php-app
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.event.inputs.image_tag || github.event.workflow_run.head_sha || 'latest' }}
        run: |
          echo "Using IMAGE_TAG=$IMAGE_TAG"

          if [ -z "$IMAGE_TAG" ]; then
            echo "Error: IMAGE_TAG is empty"
            exit 1
          fi

          echo "Fetching current task definition..."
          TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY)

          echo "Updating container image to $ECR_REPOSITORY:$IMAGE_TAG"
          NEW_TASK_DEF=$(echo $TASK_DEF_JSON | jq --arg IMAGE "$ECR_REPOSITORY:$IMAGE_TAG" '
            .taskDefinition.containerDefinitions[] |=
              if .name == "'"$CONTAINER_NAME"'" then .image = $IMAGE else . end |
            {
              family: .taskDefinition.family,
              taskRoleArn: .taskDefinition.taskRoleArn,
              executionRoleArn: .taskDefinition.executionRoleArn,
              networkMode: .taskDefinition.networkMode,
              containerDefinitions: .taskDefinition.containerDefinitions,
              requiresCompatibilities: .taskDefinition.requiresCompatibilities,
              cpu: .taskDefinition.cpu,
              memory: .taskDefinition.memory
            }
          ')

          echo "Registering new task definition revision..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)

          echo "New task definition registered: $NEW_TASK_DEF_ARN"

          echo "Updating ECS service to use new task definition..."
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN

          echo "Deployment completed."
