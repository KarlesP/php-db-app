name: Deploy to AWS

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CLUSTER_NAME: php-cluster                # from CloudFormation
          SERVICE_NAME: php-ecs-service            # ECS service name
          TASK_DEFINITION_FAMILY: php-app-task     # from CloudFormation
          CONTAINER_NAME: php-app                  # from task definition
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          echo "Updating ECS service with new image..."

          # Automatically derive the image tag from the commit SHA
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          echo "Using image tag: $IMAGE_TAG"

          # Fetch the current task definition by family name (NOT service name!)
          TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY)

          # Update the container image
          NEW_TASK_DEF=$(echo $TASK_DEF_JSON | jq --arg IMAGE "$ECR_REPOSITORY:$IMAGE_TAG" --arg NAME "$CONTAINER_NAME" '
            .taskDefinition.containerDefinitions |= map(
              if .name == $NAME then .image = $IMAGE else . end
            ) |
            {
              family: .taskDefinition.family,
              taskRoleArn: .taskDefinition.taskRoleArn,
              executionRoleArn: .taskDefinition.executionRoleArn,
              networkMode: .taskDefinition.networkMode,
              containerDefinitions: .taskDefinition.containerDefinitions,
              requiresCompatibilities: .taskDefinition.requiresCompatibilities,
              cpu: .taskDefinition.cpu,
              memory: .taskDefinition.memory
            }
          ')

          # Register the new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json "$NEW_TASK_DEF" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "New task definition registered: $NEW_TASK_DEF_ARN"

          # Update the ECS service to use the new task definition
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEF_ARN

          echo "Service updated successfully with image $ECR_REPOSITORY:$IMAGE_TAG"
